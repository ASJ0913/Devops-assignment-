AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation Template for WebServer with Security Group and EC2 Instance

Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
    ConstraintDescription: must be a valid EC2 instance type.

  MyIP:
    Description: Your IP address in CIDR format (e.g. 203.0.113.1/32).
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '^(\d{1,3}\.){3}\d{1,3}\/\d{1,2}$'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  LatestAmiId:
    Description: The latest Amazon Linux 2 AMI from the Parameter Store
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Properties:
      GroupDescription: Allow HTTP access via my IP address
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref MyIP
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref MyIP

  WebServerV2:  # <- CHANGED LOGICAL NAME
    Type: AWS::EC2::Instance
    DeletionPolicy: Delete
    Metadata:
      ForceUpdate: "2025-05-14T17:30:11"
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      UserData: !Base64 |
        #!/bin/bash
        yum update -y
        yum install -y httpd aws-cli cronie
        systemctl start crond
        systemctl enable crond
        systemctl start httpd
        systemctl enable httpd

        # Initial download of the JavaScript logic from S3
        aws s3 cp s3://iaccode-ashton/nameGenerator.js /var/www/html/nameGenerator.js --region eu-north-1

        # Set up a cron job to re-fetch JS file on every reboot
        echo "@reboot root aws s3 cp s3://iaccode-ashton/nameGenerator.js /var/www/html/nameGenerator.js --region eu-north-1" >> /etc/crontab

        # Create index.html referencing the external JS
        cat <<EOF > /var/www/html/index.html
        <html>
          <head>
            <title>Random Name Generator</title>
            <style>
              body {
                font-family: Arial, sans-serif;
                background-color: #f0f0f0;
                display: flex;
                justify-content: center;
                align-items: center;
                height: 100vh;
                margin: 0;
                text-align: center;
              }
              h1 {
                color: #333;
              }
              button {
                background-color: #4CAF50;
                color: white;
                padding: 15px 20px;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                font-size: 16px;
              }
              button:hover {
                background-color: #45a041;
              }
            </style>
            <script src="nameGenerator.js"></script>
            <script>
              document.querySelector('button').onclick = generateRandomName;
            </script>
          </head>
          <body>
            <div>
              <h1 id="randomName">Press the button to generate a name-test2</h1>
              <button>Generate Name</button>
            </div>
          </body>
        </html>
        EOF

Outputs:
  WebsiteURL:
    Value: !Join
      - ''
      - - http://
        - !GetAtt WebServerV2.PublicIp  # <- updated to match new logical ID
    Description: Public URL to access your web application